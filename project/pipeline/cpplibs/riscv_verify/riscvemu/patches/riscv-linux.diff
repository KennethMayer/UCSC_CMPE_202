diff --git a/arch/riscv/Makefile b/arch/riscv/Makefile
index dbae4cd..ba59390 100644
--- a/arch/riscv/Makefile
+++ b/arch/riscv/Makefile
@@ -62,6 +62,7 @@ KBUILD_AFLAGS += -march=$(KBUILD_MARCH)$(KBUILD_RV_ATOMIC)fd$(KBUILD_RVC)
 
 KBUILD_CFLAGS += -march=$(KBUILD_MARCH)$(KBUILD_RV_ATOMIC)$(KBUILD_RVC)
 KBUILD_CFLAGS += -mno-save-restore
+KBUILD_CFLAGS += -mstrict-align
 
 head-y := arch/riscv/kernel/head.o
 
diff --git a/arch/riscv/include/asm/processor.h b/arch/riscv/include/asm/processor.h
index 59e54ed..5412744 100644
--- a/arch/riscv/include/asm/processor.h
+++ b/arch/riscv/include/asm/processor.h
@@ -14,6 +14,7 @@
 #ifdef __KERNEL__
 #define STACK_TOP		TASK_SIZE
 #define STACK_TOP_MAX		STACK_TOP
+#define STACK_ALIGN		16
 #endif /* __KERNEL__ */
 
 #ifndef __ASSEMBLY__
@@ -45,8 +46,9 @@ struct thread_struct {
 #define thread_saved_sp(t)	((t)->thread.sp)
 #define thread_saved_fp(t)	((t)->thread.s[0])
 
-#define task_pt_regs(tsk) \
-	((struct pt_regs *)(task_stack_page(tsk) + THREAD_SIZE) - 1)
+#define task_pt_regs(tsk)						\
+	((struct pt_regs *)(task_stack_page(tsk) + THREAD_SIZE		\
+			    - ALIGN(sizeof(struct pt_regs), STACK_ALIGN)))
 
 #define KSTK_EIP(tsk)		(task_pt_regs(tsk)->sepc)
 #define KSTK_ESP(tsk)		(task_pt_regs(tsk)->sp)
diff --git a/arch/riscv/include/asm/sbi.h b/arch/riscv/include/asm/sbi.h
index 8f050f4..f69ede8 100644
--- a/arch/riscv/include/asm/sbi.h
+++ b/arch/riscv/include/asm/sbi.h
@@ -40,7 +40,7 @@ static inline int sbi_console_getchar(void)
 	return SBI_CALL_0(SBI_CONSOLE_GETCHAR);
 }
 
-static inline void sbi_set_timer(unsigned long stime_value)
+static inline void sbi_set_timer(uint64_t stime_value)
 {
 #if __riscv_xlen == 32
 	SBI_CALL_2(SBI_SET_TIMER, stime_value, stime_value >> 32);
diff --git a/arch/riscv/include/uapi/asm/siginfo.h b/arch/riscv/include/uapi/asm/siginfo.h
index 29baf87..f96849a 100644
--- a/arch/riscv/include/uapi/asm/siginfo.h
+++ b/arch/riscv/include/uapi/asm/siginfo.h
@@ -17,7 +17,7 @@
 #ifndef __ASM_SIGINFO_H
 #define __ASM_SIGINFO_H
 
-#define __ARCH_SI_PREAMBLE_SIZE	(4 * sizeof(int))
+#define __ARCH_SI_PREAMBLE_SIZE	(__SIZEOF_POINTER__ == 4 ? 12 : 16)
 
 #include <asm-generic/siginfo.h>
 
diff --git a/arch/riscv/kernel/entry.S b/arch/riscv/kernel/entry.S
index 4bf69a7..b87cb6e 100644
--- a/arch/riscv/kernel/entry.S
+++ b/arch/riscv/kernel/entry.S
@@ -22,7 +22,7 @@
 _restore_kernel_sp:
 	csrr sp, sscratch
 _save_context:
-	addi sp, sp, -(PT_SIZE)
+	addi sp, sp, -((PT_SIZE + 15) & ~15)
 	REG_S x1,  PT_RA(sp)
 	REG_S x3,  PT_GP(sp)
 	REG_S x4,  PT_TP(sp)
@@ -196,7 +196,7 @@ resume_userspace:
 	bnez s1, work_pending
 
 	/* Save unwound kernel stack pointer in sscratch */
-	addi s0, sp, PT_SIZE
+	addi s0, sp, (PT_SIZE + 15) & ~15
 	csrw sscratch, s0
 restore_all:
 	RESTORE_ALL
diff --git a/arch/riscv/kernel/head.S b/arch/riscv/kernel/head.S
index b0d8225..932a1bc 100644
--- a/arch/riscv/kernel/head.S
+++ b/arch/riscv/kernel/head.S
@@ -67,8 +67,8 @@ relocate:
 	la a0, trampoline_pg_dir
 	srl a0, a0, PAGE_SHIFT
 	or a0, a0, a1
-	sfence.vma
 	csrw sptbr, a0
+	sfence.vma
 1:
 	/* Set trap vector to spin forever to help debug */
 	la a0, .Lsecondary_park
diff --git a/arch/riscv/kernel/plic.c b/arch/riscv/kernel/plic.c
index 30c3eb3..7eac094 100644
--- a/arch/riscv/kernel/plic.c
+++ b/arch/riscv/kernel/plic.c
@@ -164,10 +164,14 @@ static int plic_init(struct device_node *node, struct device_node *parent)
 
 	for (i = 0; i < data->handlers; ++i) {
 		struct plic_handler *handler = &data->handler[i];
-		int parent_irq = irq_of_parse_and_map(node, i);
-		int hwirq;
+		struct of_phandle_args parent;
+		int parent_irq, hwirq;
 
-		if (WARN_ON(!parent_irq)) continue; // skip bad
+		if (of_irq_parse_one(node, i, &parent)) continue;
+		if (parent.args[0] == -1) continue; // skip context holes
+
+		parent_irq = irq_create_of_mapping(&parent);
+		if (!parent_irq) continue;
 
 		handler->context = PLIC_HART_CONTEXT(data, i);
 		handler->data = data;
diff --git a/arch/riscv/kernel/process.c b/arch/riscv/kernel/process.c
index 06be32d..e6f9da9 100644
--- a/arch/riscv/kernel/process.c
+++ b/arch/riscv/kernel/process.c
@@ -54,6 +54,9 @@ void start_thread(struct pt_regs *regs, unsigned long pc,
 	unsigned long sp)
 {
 	regs->sstatus = SR_PIE /* User mode, irqs on */ | SR_FS_INITIAL;
+#ifndef CONFIG_RV_PUM
+        regs->sstatus |= SR_SUM;
+#endif
 	regs->sepc = pc;
 	regs->sp = sp;
 	set_fs(USER_DS);
diff --git a/arch/riscv/kernel/time.c b/arch/riscv/kernel/time.c
index 29d5905..140ab6c 100644
--- a/arch/riscv/kernel/time.c
+++ b/arch/riscv/kernel/time.c
@@ -94,8 +94,7 @@ static unsigned long __init of_timebase(void)
 void __init time_init(void)
 {
 	timebase = of_timebase();
-	lpj_fine = timebase;
-	do_div(lpj_fine, HZ);
+        lpj_fine = timebase / HZ;
 
 	clocksource_register_hz(&riscv_clocksource, timebase);
 	init_clockevent();
diff --git a/arch/riscv/lib/delay.c b/arch/riscv/lib/delay.c
index 29097b6..8aca418 100644
--- a/arch/riscv/lib/delay.c
+++ b/arch/riscv/lib/delay.c
@@ -12,13 +12,16 @@ void __delay(unsigned long cycles)
 
 void udelay(unsigned long usecs)
 {
-	__delay((unsigned long)(((u64)usecs * timebase) / 1000000UL));
-
+	u64 ucycles = (u64)usecs * timebase;
+	do_div(ucycles, 1000000U);
+	__delay((unsigned long)ucycles);
 }
 EXPORT_SYMBOL(udelay);
 
 void ndelay(unsigned long nsecs)
 {
-	__delay((unsigned long)(((u64)nsecs * timebase) / 1000000000UL));
+	u64 ncycles = (u64)nsecs * timebase;
+	do_div(ncycles, 1000000000U);
+	__delay((unsigned long)ncycles);
 }
 EXPORT_SYMBOL(ndelay);
